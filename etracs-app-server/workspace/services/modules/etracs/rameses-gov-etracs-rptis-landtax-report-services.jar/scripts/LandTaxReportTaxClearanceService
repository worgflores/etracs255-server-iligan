import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*;

class LandTaxReportTaxClearanceService 
{
    @ActiveDB('landtaxreport_taxclearance')
    def em;

    @Service('RPTCertificationService')
    def certSvc 

    @Service('SequenceService')
    def seqSvc;

    @Service('DateService')
    def dtSvc 

    @Service('RPTUtil')
    def util

    @Service('Var')
    def var 

    @Service('ReportParameterService')
    def paramSvc 

    @DataContext('cashreceipt')
    def em_cashreceipt

    @DataContext('sys_org')
    def em_org


    @ProxyMethod
    public def getReportTypes() {
        return [
            [name: 'fullypaid', title: 'FULL PAYMENT'],
            [name: 'zerovalue', title: 'ZERO VALUE'],
            [name: 'newdiscovery', title: 'NEW EFFECTIVE'],
            [name: 'exempt', title: 'EXEMPT'],
        ]
    }
    

    @ProxyMethod
    public def initClearance(  ) {
        def cy = dtSvc.serverYear
        return [
            objid               : util.generateId('AN'),
            opener              : 'rpttaxclearance',
            year                : cy,
            qtr                 : 4,
            effectivityyear     : cy + 1,  
            certifiedby         : var.treasurer_name,
            certifiedbytitle    : var.treasurer_title,
            purpose             : 'for whatever legal purpose it may serve him/her best',
            oramount            : 0.0,
            stampamount         : 0.0,
            items               : [],
            official            : false,
            reporttype          : getReportTypes().first(),
        ]
    }

    @ProxyMethod
    public void checkDuplicateReceipt(entity) {
        def onlinePaymentRequired = util.toBoolean(var.landtax_clearance_online_payment_required, false)
        if (onlinePaymentRequired) {
            def rct = em_cashreceipt.select('objid,void.objid,void.reason')
                                    .find([receiptno: entity.orno, formno:'51'])
                                    .first();
            if (!rct) {
                throw new Exception('O.R. No. ' + entity.orno + ' does not exist.')
            } else if (rct.void?.objid) {
                throw new Exception('O.R. No. ' + entity.orno + ' has already been voided.')
            }
            
            def dup = em.findPaidClearance(entity)
            if (dup) {
                throw new Exception('O.R. No. ' + entity.orno + ' is already referenced by Clearance No. ' + dup.txnno + '.')
            }
        }


    }


    @ProxyMethod
    public def createClearance( cert ) {
        validate(cert)
        updateCertificationNo(cert)
        certSvc.createCertification(cert)
        cert.items.each{
            certSvc.createItem(it)
        }
        cert.reporttypename = cert.reporttype.name 
        em.insertTaxClearance(cert)
        return openClearance(cert.objid)
    }

    
    @ProxyMethod
    public def openClearance( objid ) {
        def cert = certSvc.openCertification(objid)
        cert.putAll(em.findInfo([objid:objid]))
        buildIssuanceInfo(cert)
        cert.items = em.getItems([rptcertificationid:objid])
        buildEffectivityYear(cert)
        buildAdministratorInfo(cert)
        buildLguNameInfo(cert)
        loadPaymentInfo(cert)
        cert.reporttype = getReportTypes().find{it.name == cert.reporttype}
        return cert 
    }

    @ProxyMethod
    public def update(entity) {
        return certSvc.update(entity)
    }


    @ProxyMethod
    public def getClearedLedgers(cert) {
        util.required('Taxpayer', cert.taxpayer.objid)
        util.required('Year', cert.year)
        util.required('Qtr', cert.qtr)
        cert.taxpayerid = cert.taxpayer.objid 
        return em.getClearedLedgers(cert)
    }

    @ProxyMethod
    public def getTaxClearancesIssued(ledger) {
        return em.getTaxClearancesIssued(ledger)
    }

    void validate(cert) {
        if (!cert.items) {
            throw new Exception('At least one property must be included.')
        }

        def isSpecialCase = util.toBoolean(var.landtax_taxclearance_allow_special_case_ledger, false)

        if ('fullypaid' == cert.reporttype.name && !isSpecialCase) {
            cert.items.each{
                if (it.lastyearpaid < cert.year) 
                    throw new Exception('TD No. ' + it.tdno + ' is not cleared for the year ' + cert.year + '.')
                if (it.lastyearpaid == cert.year && it.lastqtrpaid < cert.qtr) 
                    throw new Exception('TD No. ' + it.tdno + ' is not cleared for the ' + util.formalizeNumber(cert.qtr) + ' qtr of ' + cert.year + '.' )
            }
        }
    }    

    void buildIssuanceInfo(cert){
        def pdate = dtSvc.parseDate(cert.txndate, null)
        cert.issueday      = util.formalizeNumber(pdate.day)
        cert.issuemonth    = util.getMonthName(pdate.month)
        cert.issueyear     = pdate.year +''
        cert.issueplace    = paramSvc.standardParameter.LGUFORMALNAME
    }

    void loadPaymentInfo(cert){
        cert.items.each{item ->
            item.rptledgerid = item.refid 
            def p = [
                rptcertificationid : cert.objid,
                rptledgerid : item.rptledgerid,
                year : cert.year,
                qtr : cert.qtr,
            ]
            item.payments = em.getPaymentInfo(p)
            item.payments.each{
                if (it.ordate){
                    it.ordate = dtSvc.parse('yyyy-MM-dd', it.ordate)
                }

                if (it.minqtr == it.maxqtr) 
                    it.period = it.minqtr + 'Q, ' + it.year 
                else if (it.minqtr == 1 && it.maxqtr == 4 || (it.minqtr == 0 || it.maxqtr == 0))
                    it.period = it.year + ''
                else 
                    it.period = it.minqtr + 'Q,' + it.year + ' - ' + it.maxqtr + 'Q,' + it.year
            }
        }
    }

    void buildAdministratorInfo(cert){
        if (cert.items && cert.items.size() == 1){
            cert.administrator = cert.items[0].administrator 
        }
    }

    void buildLguNameInfo(cert){
        if (cert.items && cert.items.size() == 1){
            cert.lguname = cert.items[0].lguname
        }
    }

    void buildEffectivityYear(cert) {
        cert.effectivityyear = cert.year 
        if (cert.items){
            cert.effectivityyear = cert.items[0].effectivityyear
        }
    }

    void updateCertificationNo(cert) {
        if (cert.txnno) return

        def pdate = dtSvc.parseCurrentDate()

        def org = em_org.find([root: 1]).first()
        def key = org.code.replaceAll('-', '')  
        def format = var.landtax_taxclearance_numbering_format
        if (format) {
            def param = [:]
            param.m = pdate.month.toString().padLeft(2, '0')
            param.y = pdate.year.toString()[2..3]
            param.yy = pdate.year.toString()
            param.o = org.orgcode
            
            def keys = evalFormat(format, param, 's')
            def seqno = seqSvc.getNextFormattedSeriesA('RPTTAXCLEARANCE-' + keys.join(''), 3)

            param.s = seqno
            def seqnos = evalFormat(format, param, null)
            cert.txnno = seqnos.join('-')
        } else {
            cert.txnno = pdate.year + seqSvc.getNextFormattedSeries('RPTTAXCLEARANCE-' + pdate.year )
        }
    }

    def evalFormat(format, param, excludeKey) {
        def tokens = format.toLowerCase().tokenize('-');
        def keys = []
        tokens.each {
            if (it != excludeKey) {
                keys << param[it]
            }
        }
        return keys
    }
}
