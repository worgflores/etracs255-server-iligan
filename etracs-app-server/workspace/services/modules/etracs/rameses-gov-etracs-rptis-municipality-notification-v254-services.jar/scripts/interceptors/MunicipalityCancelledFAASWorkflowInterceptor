import com.rameses.annotations.*
import com.rameses.common.*;

class MunicipalityCancelledFAASWorkflowInterceptor
{
	@Env
	def env

    @Service('RPTNotificationService')
    def svc 

	@Service('CancelledFAASService')
	def faasSvc

	@Service('CancelledFAASSupportService')
	def supportSvc 

    @Service('RPTSmsService')
    def rptsmsSvc

    @Service('RPTUtil')
    def util


	@After(pattern="CancelledFAASWorkflowService.signal", eval="#{args[0].state == 'recommender' && args[0].action == 'submit_to_province'}", index=50000) 
    public void submitForProvinceApproval( evt ) {
        def cancelledfaas = evt.args[0].data

        util.required('Cancel Reason', cancelledfaas.reason)
        util.required('Cancel Reason', cancelledfaas.reason.code)
        util.required('Remarks', cancelledfaas.remarks)

        def asyncreq = svc.createAsyncRequest('ProvinceCancelledFAASRemoteService', 'postCancelledFaasForProvinceApproval', supportSvc.getCancelledFaasData(cancelledfaas), svc.buildEnvMap(env))
        def msg         = svc.createAsyncMessage(asyncreq[0])
        msg.filetype    = 'cancelledfaas:online'
        msg.groupid     = 'assign-receiver'
        msg.messagetype = 'cancelledfaas-forprovapproval'
        msg.message     = 'Cancel FAAS No. ' + cancelledfaas.faas.tdno + ' (assign-receiver).' 
        svc.sendAsyncMessage(msg)        
        println 'Cancelled FAAS has been successfully submitted to province for approval.'
    }   


    @After(pattern="CancelledFAASWorkflowService.signal", eval="#{args[0].state == 'approver' && args[0].action == 'approve'}", index=40000) 
    public void manualApproval( evt ) {
        def cancelledfaas = evt.args[0].data

        util.required('Cancel Reason', cancelledfaas.reason)
        util.required('Cancel Reason', cancelledfaas.reason.code)
        util.required('Remarks', cancelledfaas.remarks)
        faasSvc.approve(cancelledfaas)
        println 'Cancelled FAAS has been manually approved.'
    }       
}

