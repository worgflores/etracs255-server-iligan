import com.rameses.annotations.*
import com.rameses.common.*;

class MunicipalityFAASWorkflowInterceptor
{
	@Env
	def env

    @Service('RPTNotificationService')
    def svc 

	@Service('FAASService')
	def faasSvc

	@Service('FAASSupportService')
	def supportSvc 

    @Service('RPTSmsService')
    def rptsmsSvc

    @Service('RPTUtil')
    def util

	@After(pattern="FAASService.approveFaas", eval="#{result.datacapture == 1 || result.datacapture == true}", index=50000) 
	public void submitDataCaptureToProvince( evt ) {
		def faas = evt.result;
        def methodname = 'postDataCapturedFaas'
        if (faas.previousfaases && faas.previousfaases.findAll{it.prevfaasid != null} ){
            methodname = 'postManualApprovedTransaction'
        }
            
		def asyncreq    = svc.createAsyncRequest('ProvinceFAASRemoteService', methodname, supportSvc.getFaasData(faas), svc.buildEnvMap(env))
        def msg         = svc.createAsyncMessage(asyncreq[0])
        msg.filetype    = 'faas'
        msg.txnid       = faas.objid
        msg.txnno       = (faas.tdno ? faas.tdno : faas.prevtdno)
        msg.messagetype = 'faas-datacaptured'
        msg.message     = 'Post data captured FAAS No. ' + (faas.tdno ? faas.tdno : faas.utdno) + '.'
        svc.sendAsyncMessage(msg)
        println 'submitDataCaptureToProvince....'
	}


	@After(pattern="FAASWorkflowService.signal", eval="#{args[0].state == 'approver' && args[0].action == 'approve'}", index=50000) 
	public void approveFaas( evt ) {
		def faas = evt.args[0].data
		faas.putAll(faasSvc.approveFaas(faas))
        submitApprovedFaas(faas)
	}

	@After(pattern="FAASWorkflowService.signal", eval="#{args[0].state == 'recommender' && args[0].action == 'submit_to_province'}", index=50000) 
    public void submitFaasToProvince( evt ) {
        submitFaasForProvinceApproval(evt.args[0].data)
    }   

    @After(pattern="MunicipalityFAASService.resubmitToProvince", index=50000) 
    public void resubmitToProvince( evt ) {
        def faas = evt.result 
        if (util.isTrue(faas.datacapture))
            submitDataCaptureToProvince(evt)
        else if ('current'.equalsIgnoreCase(faas.state))
            submitApprovedFaas(faas)
        else 
            submitFaasForProvinceApproval(evt.result)
    }   

    void submitApprovedFaas(faas){
        def asyncreq    = svc.createAsyncRequest('ProvinceFAASRemoteService', 'postMunicipalityApprovedFaas', supportSvc.getFaasData(faas), svc.buildEnvMap(env))
        def msg         = svc.createAsyncMessage(asyncreq[0])
        msg.filetype    = 'faas'
        msg.txnid       = faas.objid
        msg.txnno       = (faas.tdno ? faas.tdno : faas.prevtdno)
        msg.messagetype = 'faas-municipality-approved'
        msg.message     = 'FAAS No. ' + (faas.tdno ? faas.tdno : faas.utdno) + '.'
        svc.sendAsyncMessage(msg)
        rptsmsSvc.notifyClient(faas)
        println 'Submit Municipality Approved FAAS to Province....'
    }    

    void submitFaasForProvinceApproval(faas){
        def asyncreq = svc.createAsyncRequest('ProvinceFAASRemoteService', 'postFaasForProvinceApproval', supportSvc.getFaasData(faas), svc.buildEnvMap(env))
        def msg         = svc.createAsyncMessage(asyncreq[0])
        msg.filetype    = 'faas'
        msg.txnid       = faas.objid
        msg.txnno       = (faas.tdno ? faas.tdno : faas.prevtdno)
        msg.groupid     = 'assign-receiver'
        msg.messagetype = 'faas-forprovapproval'
        msg.message     = 'FAAS No. ' + (faas.tdno ? faas.tdno : faas.utdno) + ' (assign-receiver).' 
        svc.sendAsyncMessage(msg)
    }
}

